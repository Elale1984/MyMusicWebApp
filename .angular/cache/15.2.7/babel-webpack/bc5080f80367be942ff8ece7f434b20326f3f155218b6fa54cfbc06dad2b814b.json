{"ast":null,"code":"import exampledata from '../../data/sample-music-data.json';\nimport { Album } from '../models/Album';\nimport { Artist } from '../models/Artist';\nimport { Track } from '../models/Track';\nimport * as i0 from \"@angular/core\";\nexport class MusicServiceService {\n  constructor() {\n    this.artists = [];\n    this.albums = [];\n    this.createArtists();\n    this.createAlbums();\n  }\n  createArtists() {\n    this.artists.push(new Artist(0, 'The Beatles'));\n  }\n  createAlbums() {\n    if (this.albums.length == 0) {\n      exampledata.forEach(data => {\n        if (data.artist === 'The Beatles') {\n          const tracks = data.tracks.map(trackData => new Track(trackData.id, trackData.number, trackData.title, trackData.lyrics, trackData.video));\n          const album = new Album(data.id, data.title, data.artist, data.description, data.year, data.image, tracks);\n          this.albums.push(album);\n        }\n      });\n    }\n  }\n  getArtists() {\n    return this.artists;\n  }\n  getAlbums() {\n    return this.albums;\n  }\n  getAlbum(artist, id) {\n    const album = this.albums.find(a => a.Artist === artist && a.Id === id);\n    if (album) {\n      const tracks = album.Tracks.map(track => new Track(track.Id, track.Number, track.Title, track.Lyrics, track.Video));\n      return new Album(album.Id, album.Title, album.Artist, album.Description, album.Year, album.Image, tracks);\n    }\n    return undefined;\n  }\n  createAlbum(album) {\n    if (this.albums.push(album)) {\n      return \"Album was successfully created\";\n    } else return \"There was an error creating the album\";\n  }\n  createArtist(artist) {\n    if (this.artists.push(new Artist(this.getArtists().length - 1, artist))) return \"Added Artist To List\";else return \"Error adding artist to the list\";\n  }\n  updateAlbum(album) {\n    const index = this.albums.findIndex(a => a.Id === album.Id);\n    if (index !== -1) {\n      this.albums.splice(index, 1, album);\n    }\n  }\n  deleteAlbum(id, artist) {\n    const index = this.albums.findIndex(a => a.Id === id);\n    if (index !== -1) {\n      this.albums.splice(index, 1);\n    }\n  }\n}\nMusicServiceService.ɵfac = function MusicServiceService_Factory(t) {\n  return new (t || MusicServiceService)();\n};\nMusicServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MusicServiceService,\n  factory: MusicServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["exampledata","Album","Artist","Track","MusicServiceService","constructor","createArtists","createAlbums","artists","push","albums","length","forEach","data","artist","tracks","map","trackData","id","number","title","lyrics","video","album","description","year","image","getArtists","getAlbums","getAlbum","find","a","Id","Tracks","track","Number","Title","Lyrics","Video","Description","Year","Image","undefined","createAlbum","createArtist","updateAlbum","index","findIndex","splice","deleteAlbum","factory","providedIn"],"sourceRoot":"","sources":["/home/potluck/Dev/Angular/2023/src/app/service/music-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport exampledata from '../../data/sample-music-data.json';\n\nimport { Album } from '../models/Album';\nimport { Artist } from '../models/Artist';\nimport { Track } from '../models/Track';\n\n@Injectable({ providedIn: 'root' })\nexport class MusicServiceService {\n\tprivate artists: Artist[] = [];\n\tprivate albums: Album[] = [];\n\n\tconstructor() {\n\t\tthis.createArtists();\n\t\tthis.createAlbums();\n\t}\n\n\n\tprivate createArtists(): void {\n\t\tthis.artists.push(new Artist(0, 'The Beatles'));\n\t}\n\n\tprivate createAlbums(): void {\n\t\tif ( this.albums.length == 0 ) {\n\t\t\texampledata.forEach((data: any) => {\n\t\t\t\tif (data.artist === 'The Beatles') {\n\t\t\t\t\tconst tracks = data.tracks.map((trackData: any) => new Track(trackData.id, trackData.number, trackData.title, trackData.lyrics, trackData.video));\n\t\t\t\t\tconst album = new Album(data.id, data.title, data.artist, data.description, data.year, data.image, tracks);\n\t\t\t\t\tthis.albums.push(album);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\n\t}\n\n\tpublic getArtists(): Artist[] {\n\t\treturn this.artists;\n\t}\n\n\tpublic getAlbums(): Album[] {\n\t\treturn this.albums;\n\t}\n\n\tpublic getAlbum(artist: string, id: number): Album | undefined {\n\t\tconst album = this.albums.find((a) => a.Artist === artist && a.Id === id);\n\n\t\tif (album) {\n\t\t\tconst tracks = album.Tracks.map((track) => new Track(track.Id, track.Number, track.Title, track.Lyrics, track.Video));\n\t\t\treturn new Album(album.Id, album.Title, album.Artist, album.Description, album.Year, album.Image, tracks);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tpublic createAlbum(album: Album): String {\n\t\tif (this.albums.push(album)) {\n\t\t\treturn \"Album was successfully created\";\n\t\t}\n\t\telse\n\t\t\treturn \"There was an error creating the album\";\n\t}\n\tpublic createArtist(artist: string): String {\n\t\tif (this.artists.push(new Artist(this.getArtists().length - 1, artist)))\n\t\t\treturn \"Added Artist To List\";\n\t\telse\n\t\t\treturn \"Error adding artist to the list\";\n\n\t}\n\tpublic updateAlbum(album: Album): void {\n\t\tconst index = this.albums.findIndex((a) => a.Id === album.Id);\n\n\t\tif (index !== -1) {\n\t\t\tthis.albums.splice(index, 1, album);\n\t\t}\n\t}\n\n\tpublic deleteAlbum(id: number, artist: string): void {\n\t\tconst index = this.albums.findIndex((a) => a.Id === id);\n\n\t\tif (index !== -1) {\n\t\t\tthis.albums.splice(index, 1);\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}