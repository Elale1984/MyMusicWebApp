{"ast":null,"code":"import exampledata from '../../data/sample-music-data.json';\nimport { Album } from '../models/Album';\nimport { Artist } from '../models/Artist';\nimport { Track } from '../models/Track';\nimport * as i0 from \"@angular/core\";\nexport class MusicServiceService {\n  constructor() {\n    this.artists = [];\n    this.albums = [];\n    this.createArtists();\n    this.createAlbums();\n  }\n  createArtists() {\n    this.artists.push(new Artist(0, 'The Beatles'));\n  }\n  createAlbums() {\n    exampledata.forEach((data, i) => {\n      if (data.artist.name === this.artists[index]) {\n        const tracks = data.tracks.map(trackData => new Track(trackData.id, trackData.number, trackData.title, trackData.lyrics, trackData.video));\n        const album = new Album(data.id, data.title, data.artist, data.description, data.year, data.image, tracks);\n        this.albums.push(album);\n      } else {\n        const artist = new Artist(data.artist.id, data.artist.name);\n        this.artists.push(artist);\n        const tracks = data.tracks.map(trackData => new Track(trackData.id, trackData.number, trackData.title, trackData.lyrics, trackData.video));\n        const album = new Album(data.id, data.title, data.artist, data.description, data.year, data.image, tracks);\n      }\n    });\n  }\n  getArtists() {\n    return this.artists;\n  }\n  getAlbums(artist) {\n    return this.albums;\n  }\n  getAlbum(artist, id) {\n    const album = this.albums.find(a => a.Artist === artist && a.Id === id);\n    if (album) {\n      const tracks = album.Tracks.map(track => new Track(track.Id, track.Number, track.Title, track.Lyrics, track.Video));\n      return new Album(album.Id, album.Title, album.Artist, album.Description, album.Year, album.Image, tracks);\n    }\n    return undefined;\n  }\n  createAlbum(album) {\n    this.albums.push(album);\n  }\n  createArtist(artist) {\n    this.artists.push(artist);\n  }\n  updateAlbum(album) {\n    const index = this.albums.findIndex(a => a.Id === album.Id);\n    if (index !== -1) {\n      this.albums.splice(index, 1, album);\n    }\n  }\n  deleteAlbum(id, artist) {\n    const index = this.albums.findIndex(a => a.Id === id);\n    if (index !== -1) {\n      this.albums.splice(index, 1);\n    }\n  }\n}\nMusicServiceService.ɵfac = function MusicServiceService_Factory(t) {\n  return new (t || MusicServiceService)();\n};\nMusicServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MusicServiceService,\n  factory: MusicServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["exampledata","Album","Artist","Track","MusicServiceService","constructor","createArtists","createAlbums","artists","push","forEach","data","i","artist","name","index","tracks","map","trackData","id","number","title","lyrics","video","album","description","year","image","albums","getArtists","getAlbums","getAlbum","find","a","Id","Tracks","track","Number","Title","Lyrics","Video","Description","Year","Image","undefined","createAlbum","createArtist","updateAlbum","findIndex","splice","deleteAlbum","factory","providedIn"],"sourceRoot":"","sources":["/home/potluck/Dev/Angular/2023/src/app/service/music-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport exampledata from '../../data/sample-music-data.json';\n\nimport { Album } from '../models/Album';\nimport { Artist } from '../models/Artist';\nimport { Track } from '../models/Track';\n\n@Injectable({ providedIn: 'root' })\nexport class MusicServiceService {\n\tprivate readonly artists: Artist[] = [];\n\tprivate readonly albums: Album[] = [];\n\n\tconstructor() {\n\t\tthis.createArtists();\n\t\tthis.createAlbums();\n\t}\n\n\tprivate createArtists(): void {\n\t\tthis.artists.push(new Artist(0, 'The Beatles'));\n\t}\n\n\tprivate createAlbums(): void {\n\t\texampledata.forEach((data: any, i: number) => {\n\t\t\tif (data.artist.name === this.artists[index]) {\n\t\t\t\tconst tracks = data.tracks.map((trackData: any) => new Track(trackData.id, trackData.number, trackData.title, trackData.lyrics, trackData.video));\n\t\t\t\tconst album = new Album(data.id, data.title, data.artist, data.description, data.year, data.image, tracks);\n\t\t\t\tthis.albums.push(album);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst artist: Artist = new Artist(data.artist.id, data.artist.name);\n\t\t\t\tthis.artists.push(artist);\n\t\t\t\tconst tracks = data.tracks.map((trackData: any) => new Track(trackData.id, trackData.number, trackData.title, trackData.lyrics, trackData.video));\n\t\t\t\tconst album = new Album(data.id, data.title, data.artist, data.description, data.year, data.image, tracks);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic getArtists(): Artist[] {\n\t\treturn this.artists;\n\t}\n\n\tpublic getAlbums(artist: string): Album[] {\n\t\treturn this.albums;\n\t}\n\n\tpublic getAlbum(artist: string, id: number): Album | undefined {\n\t\tconst album = this.albums.find((a) => a.Artist === artist && a.Id === id);\n\n\t\tif (album) {\n\t\t\tconst tracks = album.Tracks.map((track) => new Track(track.Id, track.Number, track.Title, track.Lyrics, track.Video));\n\t\t\treturn new Album(album.Id, album.Title, album.Artist, album.Description, album.Year, album.Image, tracks);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tpublic createAlbum(album: Album): void {\n\t\tthis.albums.push(album);\n\t}\n\tpublic createArtist(artist: Artist): void {\n\t\tthis.artists.push(artist);\n\t}\n\tpublic updateAlbum(album: Album): void {\n\t\tconst index = this.albums.findIndex((a) => a.Id === album.Id);\n\n\t\tif (index !== -1) {\n\t\t\tthis.albums.splice(index, 1, album);\n\t\t}\n\t}\n\n\tpublic deleteAlbum(id: number, artist: string): void {\n\t\tconst index = this.albums.findIndex((a) => a.Id === id);\n\n\t\tif (index !== -1) {\n\t\t\tthis.albums.splice(index, 1);\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}